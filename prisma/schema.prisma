generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String
  accounts      Account[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Employees {
  id           Int        @id @default(autoincrement())
  first_name   String
  last_name    String?
  nick_name    String?
  location     String?
  pay_rate     Float?
  added_by     String?
  updated_by   String?
  active       Boolean    @default(true)
  locationInfo Locations? @relation(fields: [location], references: [location])
}

model TimeSheets {
  id                   Int       @id @default(autoincrement())
  employee_id          Int
  date_worked          String
  job_number           Int
  job_code             Int
  begin_time           DateTime? @db.Time(6)
  end_time             DateTime? @db.Time(6)
  hours                Int       @default(0)
  minutes              Int       @default(0)
  pay_rate             Float
  added_by             String
  added_date           String
  job_code_description String?
}

model Jobs {
  id           Int     @id @default(autoincrement())
  job_number   Int     @unique
  job_location String
  job_customer String
  job_address  String?
}

model JobLumberCost {
  id              Int     @id @default(autoincrement())
  date            String
  job_number      Int
  wood_id         Int
  wood_type       String?
  wood_replace_id Int
  quantity        Float
  description     String?
  thickness       Float
  length          Float
  width           Float
  cost_over       Float?
  total_cost      Float
  ft_per_piece    Float
  price           Float
  tbf             Float
  entered_by      String?
  entered_date    String?
  updated_by      String?
  updated_date    String?
}

model JobLaborCodes {
  id             Int     @id @default(autoincrement())
  description    String
  enabled        Boolean @default(true)
  job_labor_code Int     @default(0)
  location       String? @default("")
}

model Locations {
  id        Int         @id @default(autoincrement())
  location  String      @unique
  enabled   Boolean     @default(true)
  employees Employees[]
}

model WoodTypes {
  id        Int     @id @default(autoincrement())
  wood_type String  @unique
  enabled   Boolean @default(true)
}

model WoodReplacement {
  replace_cost_id Int     @unique
  wood_id         Int?
  wood_type       String?
  thickness       Float?
  waste_factor    Float?
  unit            String
  replacement     Float?
  price           Int
  updated_date    String
}
