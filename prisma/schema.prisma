generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Employees {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String?
  nick_name  String?
  location   String?
  pay_rate   Float?
  added_by   String?
  updated_by String?
  active     Boolean @default(true)

  // Relationships
  locationInfo Locations?   @relation(fields: [location], references: [location])
}

model TimeSheets {
  id          Int     @id @default(autoincrement())
  employee_id Int
  date_worked String
  job_number  Int
  job_code    Int
  begin_time  String? @default("")
  end_time    String? @default("")
  hours       Int     @default(0)
  minutes     Int     @default(0)
  pay_rate    Float // This will be populated from Employees
  added_by    String
  added_date  String
}

model Jobs {
  id           Int     @id @default(autoincrement())
  job_number   Int     @unique // Make job_number unique for linking
  job_location String
  job_customer String
  job_address  String?

  // Relationships
  locationInfo  Locations?      @relation(fields: [job_location], references: [location])
}

model JobLumberCost {
  id              Int     @id @default(autoincrement())
  date            String
  job_number      Int
  wood_id         Int
  wood_type       String
  wood_replace_id Int
  quantity        Float // Changed to Float if this can be a decimal
  description     String
  thickness       Float
  length          Float
  width           Float
  cost_over       Float // Changed to Float if this can be a decimal
  total_cost      Float // Changed to Float if this can be a decimal
  ft_per_piece    Float // Changed to Float if this can be a decimal
  price           Float
  tbf             Float
  entered_by      String
  entered_date    String
  updated_by      String?
  updated_date    String?
}

model JobLaborCodes {
  id          Int     @id @default(autoincrement())
  description String
  enabled     Boolean @default(true)
}

model Locations {
  id       Int     @id @default(autoincrement())
  location String  @unique // Make location unique for linking
  enabled  Boolean @default(true)

  // Relationships
  employees Employees[]
  jobs      Jobs[]
}

model WoodTypes {
  id        Int     @id @default(autoincrement())
  wood_type String  @unique // Make wood_type unique for linking
  enabled   Boolean @default(true)

  @@unique([id, wood_type])
}

model WoodCost {
  id                  Int     @id @default(autoincrement())
  replace_cost_id     Int
  wood_id             Int
  wood_type           String
  thickness           Float
  waste_factor        Float
  unit                String
  replacement         Float
  last_update         String
  price               Int
}
